"use client";

import { useState, useEffect } from "react";
import { useRouter } from "next/navigation";
import { useSession } from "next-auth/react";
import {
  UserPlus,
  Users,
  Trash2,
  Mail,
  CheckCircle,
  XCircle,
  ArrowLeft,
} from "lucide-react";
import Modal from "@/components/Modal";
import ConfirmDialog from "@/components/ConfirmDialog";

type User = {
  id: string;
  name: string;
  email: string | null;
  document: string;
  role: string;
  createdAt: string;
};

type NewUserData = {
  name: string;
  email: string;
  document: string;
  role: string;
  sendEmail: boolean;
};

export default function UsersPage() {
  const router = useRouter();
  const { data: session, status } = useSession();
  const [users, setUsers] = useState<User[]>([]);
  const [loading, setLoading] = useState(true);
  const [showNewUserForm, setShowNewUserForm] = useState(false);
  const [newUser, setNewUser] = useState<NewUserData>({
    name: "",
    email: "",
    document: "",
    role: "MESERO",
    sendEmail: true,
  });
  const [creating, setCreating] = useState(false);
  const [showModal, setShowModal] = useState(false);
  const [modalConfig, setModalConfig] = useState<{
    type: "success" | "error";
    title: string;
    message: string;
  }>({ type: "success", title: "", message: "" });
  const [confirmDelete, setConfirmDelete] = useState<{
    show: boolean;
    userId: string | null;
    userName: string | null;
  }>({ show: false, userId: null, userName: null });
  const [tempPassword, setTempPassword] = useState<string | null>(null);

  useEffect(() => {
    if (status === "unauthenticated") {
      router.push("/auth/login");
    }
    if (status === "authenticated" && session?.user?.role !== "ADMIN") {
      router.push("/dashboard");
    }
  }, [status, session, router]);

  useEffect(() => {
    if (status === "authenticated") {
      fetchUsers();
    }
  }, [status]);

  const fetchUsers = async () => {
    try {
      const response = await fetch("/api/users");
      if (response.ok) {
        const data = await response.json();
        setUsers(data.users);
      }
    } catch (error) {
      console.error("Error fetching users:", error);
    } finally {
      setLoading(false);
    }
  };

  const handleCreateUser = async (e: React.FormEvent) => {
    e.preventDefault();
    setCreating(true);
    setTempPassword(null);

    try {
      const response = await fetch("/api/users", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(newUser),
      });

      const data = await response.json();

      if (response.ok) {
        setModalConfig({
          type: "success",
          title: "¬°Usuario creado exitosamente!",
          message: data.emailSent
            ? `Las credenciales han sido enviadas al correo ${newUser.email}`
            : "Usuario creado. Guarda la contrase√±a temporal mostrada abajo.",
        });
        
        if (!data.emailSent && data.tempPassword) {
          setTempPassword(data.tempPassword);
        }
        
        setShowModal(true);
        setNewUser({
          name: "",
          email: "",
          document: "",
          role: "MESERO",
          sendEmail: true,
        });
        setShowNewUserForm(false);
        fetchUsers();
      } else {
        setModalConfig({
          type: "error",
          title: "Error al crear usuario",
          message: data.error || "No se pudo crear el usuario",
        });
        setShowModal(true);
      }
    } catch (error) {
      setModalConfig({
        type: "error",
        title: "Error",
        message: "Ocurri√≥ un error al crear el usuario",
      });
      setShowModal(true);
    } finally {
      setCreating(false);
    }
  };

  const handleDeleteUser = async () => {
    if (!confirmDelete.userId) return;

    try {
      const response = await fetch(`/api/users/${confirmDelete.userId}`, {
        method: "DELETE",
      });

      if (response.ok) {
        setModalConfig({
          type: "success",
          title: "Usuario eliminado",
          message: "El usuario ha sido eliminado correctamente",
        });
        setShowModal(true);
        fetchUsers();
      } else {
        const data = await response.json();
        setModalConfig({
          type: "error",
          title: "Error",
          message: data.error || "No se pudo eliminar el usuario",
        });
        setShowModal(true);
      }
    } catch (error) {
      setModalConfig({
        type: "error",
        title: "Error",
        message: "Ocurri√≥ un error al eliminar el usuario",
      });
      setShowModal(true);
    } finally {
      setConfirmDelete({ show: false, userId: null, userName: null });
    }
  };

  const getRoleLabel = (role: string) => {
    const roles: Record<string, string> = {
      ADMIN: "üëë Administrador",
      MESERO: "üßë‚Äçüíº Mesero",
      COCINERO: "üë®‚Äçüç≥ Cocinero",
    };
    return roles[role] || role;
  };

  if (status === "loading" || loading) {
    return (
      <div className="min-h-screen bg-[#0a0a0f] text-white flex items-center justify-center">
        <div className="text-center">
          <div className="inline-block h-8 w-8 animate-spin rounded-full border-4 border-solid border-orange-500 border-r-transparent"></div>
          <p className="mt-4 text-sm text-white/60">Cargando usuarios...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-[#0a0a0f] text-white p-6">
      {/* Header */}
      <div className="mb-6">
        <button
          onClick={() => router.push("/dashboard")}
          className="mb-4 rounded-lg bg-zinc-900 border border-zinc-800 p-2 transition hover:border-zinc-700"
        >
          <ArrowLeft className="h-5 w-5" />
        </button>
        
        <div className="flex flex-col gap-4 sm:flex-row sm:items-center sm:justify-between">
          <div>
            <h1 className="text-2xl font-bold flex items-center gap-2">
              <Users className="h-6 w-6" />
              Gesti√≥n de Usuarios
            </h1>
            <p className="mt-1 text-sm text-white/60">
              Administra el equipo de tu restaurante
            </p>
          </div>

          <button
            onClick={() => setShowNewUserForm(!showNewUserForm)}
            className="flex items-center gap-2 rounded-lg bg-orange-500 px-3 py-2 sm:px-4 text-sm font-medium transition hover:bg-orange-600"
          >
            <UserPlus className="h-4 w-4" />
            <span className="hidden sm:inline">Nuevo Usuario</span>
            <span className="sm:hidden">Nuevo</span>
          </button>
        </div>
      </div>

      {/* New User Form */}
      {showNewUserForm && (
        <div className="mb-6 rounded-lg border border-zinc-800 bg-zinc-900 p-6 animate-fadeIn">
          <h2 className="text-lg font-semibold mb-4">Crear Nuevo Usuario</h2>
          <form onSubmit={handleCreateUser} className="space-y-4">
            <div className="grid gap-4 sm:grid-cols-2">
              <label className="block">
                <span className="text-sm font-medium mb-2 block text-gray-300">
                  Nombre Completo *
                </span>
                <input
                  className="w-full rounded-lg bg-zinc-800 border border-zinc-700 px-4 py-2 text-white placeholder-gray-500 focus:border-orange-500 focus:outline-none transition"
                  placeholder="Juan P√©rez"
                  value={newUser.name}
                  onChange={(e) =>
                    setNewUser({ ...newUser, name: e.target.value })
                  }
                  required
                />
              </label>

              <label className="block">
                <span className="text-sm font-medium mb-2 block text-gray-300">
                  C√©dula *
                </span>
                <input
                  className="w-full rounded-lg bg-zinc-800 border border-zinc-700 px-4 py-2 text-white placeholder-gray-500 focus:border-orange-500 focus:outline-none transition"
                  placeholder="1234567890"
                  value={newUser.document}
                  onChange={(e) =>
                    setNewUser({ ...newUser, document: e.target.value })
                  }
                  required
                />
              </label>

              <label className="block">
                <span className="text-sm font-medium mb-2 block text-gray-300">
                  Correo Electr√≥nico
                </span>
                <input
                  type="email"
                  className="w-full rounded-lg bg-zinc-800 border border-zinc-700 px-4 py-2 text-white placeholder-gray-500 focus:border-orange-500 focus:outline-none transition"
                  placeholder="juan@ejemplo.com"
                  value={newUser.email}
                  onChange={(e) =>
                    setNewUser({ ...newUser, email: e.target.value })
                  }
                />
              </label>

              <label className="block">
                <span className="text-sm font-medium mb-2 block text-gray-300">
                  Rol *
                </span>
                <select
                  className="w-full rounded-lg bg-zinc-800 border border-zinc-700 px-4 py-2 text-white focus:border-orange-500 focus:outline-none transition"
                  value={newUser.role}
                  onChange={(e) =>
                    setNewUser({ ...newUser, role: e.target.value })
                  }
                  required
                >
                  <option value="MESERO">üßë‚Äçüíº Mesero</option>
                  <option value="COCINERO">üë®‚Äçüç≥ Cocinero</option>
                  <option value="ADMIN">üëë Administrador</option>
                </select>
              </label>
            </div>

            <label className="flex items-center gap-2 cursor-pointer">
              <input
                type="checkbox"
                checked={newUser.sendEmail}
                onChange={(e) =>
                  setNewUser({ ...newUser, sendEmail: e.target.checked })
                }
                className="h-4 w-4 rounded border-zinc-700 bg-zinc-800 text-orange-500 focus:ring-orange-500"
              />
              <span className="text-sm text-gray-300">
                Enviar credenciales por correo electr√≥nico
              </span>
            </label>

            <div className="flex gap-2">
              <button
                type="submit"
                disabled={creating}
                className="flex-1 rounded-lg bg-orange-500 px-4 py-2 text-sm font-medium transition hover:bg-orange-600 disabled:opacity-50"
              >
                {creating ? "Creando..." : "Crear Usuario"}
              </button>
              <button
                type="button"
                onClick={() => setShowNewUserForm(false)}
                className="rounded-lg bg-zinc-800 border border-zinc-700 px-4 py-2 text-sm font-medium transition hover:bg-zinc-700"
              >
                Cancelar
              </button>
            </div>
          </form>
        </div>
      )}

      {/* Temporary Password Display */}
      {tempPassword && (
        <div className="mb-6 rounded-lg border-2 border-yellow-500 bg-yellow-500/10 p-6 animate-fadeIn">
          <div className="flex items-start gap-3">
            <div className="text-yellow-500 text-2xl">‚ö†Ô∏è</div>
            <div className="flex-1">
              <h3 className="font-semibold text-yellow-500 mb-2">
                Contrase√±a Temporal Generada
              </h3>
              <p className="text-sm text-white/80 mb-3">
                Guarda esta contrase√±a de forma segura. No se volver√° a mostrar.
              </p>
              <div className="rounded-lg bg-black/40 border border-yellow-500/30 p-4">
                <code className="text-lg font-mono text-yellow-400 break-all">
                  {tempPassword}
                </code>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Users List - Responsive */}
      {/* Mobile View - Cards */}
      <div className="block lg:hidden space-y-4">
        {users.length === 0 ? (
          <div className="rounded-lg border border-zinc-800 bg-zinc-900 p-12 text-center text-white/40">
            No hay usuarios registrados
          </div>
        ) : (
          users.map((user) => (
            <div
              key={user.id}
              className="rounded-lg border border-zinc-800 bg-zinc-900 p-4 space-y-3"
            >
              <div className="flex items-start justify-between">
                <div>
                  <h3 className="font-medium text-white">{user.name}</h3>
                  <p className="text-sm text-white/60 mt-1">
                    <code>{user.document}</code>
                  </p>
                </div>
                {(session?.user as any)?.id !== user.id && (
                  <button
                    onClick={() =>
                      setConfirmDelete({
                        show: true,
                        userId: user.id,
                        userName: user.name,
                      })
                    }
                    className="rounded-lg bg-red-500/10 border border-red-500/20 p-2 text-red-400 transition hover:bg-red-500/20"
                  >
                    <Trash2 className="h-4 w-4" />
                  </button>
                )}
              </div>

              {user.email && (
                <div className="flex items-center gap-2 text-sm text-white/80">
                  <Mail className="h-4 w-4 text-white/40" />
                  {user.email}
                </div>
              )}

              <div className="flex items-center justify-between pt-2 border-t border-zinc-800">
                <span className="inline-flex items-center rounded-full bg-zinc-800 px-3 py-1 text-xs font-medium">
                  {getRoleLabel(user.role)}
                </span>
                <span className="text-xs text-white/40">
                  {new Date(user.createdAt).toLocaleDateString("es-MX", {
                    year: "numeric",
                    month: "short",
                    day: "numeric",
                  })}
                </span>
              </div>
            </div>
          ))
        )}
      </div>

      {/* Desktop View - Table */}
      <div className="hidden lg:block rounded-lg border border-zinc-800 bg-zinc-900 overflow-hidden">
        <div className="overflow-x-auto">
          <table className="w-full">
            <thead>
              <tr className="border-b border-zinc-800 bg-zinc-900/50">
                <th className="px-6 py-4 text-left text-sm font-medium text-white/60">
                  Usuario
                </th>
                <th className="px-6 py-4 text-left text-sm font-medium text-white/60">
                  C√©dula
                </th>
                <th className="px-6 py-4 text-left text-sm font-medium text-white/60">
                  Email
                </th>
                <th className="px-6 py-4 text-left text-sm font-medium text-white/60">
                  Rol
                </th>
                <th className="px-6 py-4 text-left text-sm font-medium text-white/60">
                  Fecha de Registro
                </th>
                <th className="px-6 py-4 text-right text-sm font-medium text-white/60">
                  Acciones
                </th>
              </tr>
            </thead>
            <tbody>
              {users.length === 0 ? (
                <tr>
                  <td colSpan={6} className="px-6 py-12 text-center text-white/40">
                    No hay usuarios registrados
                  </td>
                </tr>
              ) : (
                users.map((user) => (
                  <tr
                    key={user.id}
                    className="border-b border-zinc-800 transition hover:bg-zinc-800/50"
                  >
                    <td className="px-6 py-4">
                      <div className="font-medium">{user.name}</div>
                    </td>
                    <td className="px-6 py-4">
                      <code className="text-sm text-white/80">{user.document}</code>
                    </td>
                    <td className="px-6 py-4">
                      {user.email ? (
                        <div className="flex items-center gap-2 text-sm text-white/80">
                          <Mail className="h-4 w-4" />
                          {user.email}
                        </div>
                      ) : (
                        <span className="text-sm text-white/40">Sin email</span>
                      )}
                    </td>
                    <td className="px-6 py-4">
                      <span className="inline-flex items-center rounded-full bg-zinc-800 px-3 py-1 text-xs font-medium">
                        {getRoleLabel(user.role)}
                      </span>
                    </td>
                    <td className="px-6 py-4 text-sm text-white/60">
                      {new Date(user.createdAt).toLocaleDateString("es-MX", {
                        year: "numeric",
                        month: "short",
                        day: "numeric",
                      })}
                    </td>
                    <td className="px-6 py-4 text-right">
                      {(session?.user as any)?.id !== user.id && (
                        <button
                          onClick={() =>
                            setConfirmDelete({
                              show: true,
                              userId: user.id,
                              userName: user.name,
                            })
                          }
                          className="rounded-lg bg-red-500/10 border border-red-500/20 p-2 text-red-400 transition hover:bg-red-500/20"
                        >
                          <Trash2 className="h-4 w-4" />
                        </button>
                      )}
                    </td>
                  </tr>
                ))
              )}
            </tbody>
          </table>
        </div>
      </div>

      {/* Total Count */}
      <div className="mt-4 text-sm text-white/60">
        Total: {users.length} usuario{users.length !== 1 ? "s" : ""}
      </div>

      {/* Modals */}
      <Modal
        isOpen={showModal}
        onClose={() => {
          setShowModal(false);
          setTempPassword(null);
        }}
        title={modalConfig.title}
        message={modalConfig.message}
        type={modalConfig.type}
      />

      <ConfirmDialog
        isOpen={confirmDelete.show}
        onClose={() =>
          setConfirmDelete({ show: false, userId: null, userName: null })
        }
        onConfirm={handleDeleteUser}
        title="Eliminar Usuario"
        message={`¬øEst√°s seguro de que deseas eliminar a ${confirmDelete.userName}? Esta acci√≥n no se puede deshacer.`}
        confirmText="Eliminar"
        icon="üóëÔ∏è"
      />
    </div>
  );
}
