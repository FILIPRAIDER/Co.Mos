
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  CLIENT
  WORKER   // "trabajador"
  ADMIN
}

enum OrderStatus {
  PENDING       // Pendiente
  PREPARING     // En preparación
  READY         // Listo para entregar
  DELIVERED     // Entregado
  PAID          // Pagado
  CANCELLED     // Cancelado
}

enum OrderType {
  DINE_IN       // Para comer aquí
  TAKEAWAY      // Para llevar
}

model User {
  id            String   @id @default(cuid())
  name          String
  email         String?  @unique
  document      String   @unique           // cédula/NIT para workers/admins
  passwordHash  String
  role          Role     @default(CLIENT)

  orders        Order[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Category {
  id            String    @id @default(cuid())
  name          String
  description   String?
  imageUrl      String?
  order         Int       @default(0)
  
  products      Product[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Product {
  id            String    @id @default(cuid())
  name          String
  description   String?
  price         Float
  imageUrl      String?
  available     Boolean   @default(true)
  categoryId    String
  
  category      Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  orderItems    OrderItem[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([categoryId])
}

model Table {
  id            String    @id @default(cuid())
  number        Int       @unique
  capacity      Int       @default(4)
  available     Boolean   @default(true)
  
  orders        Order[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Order {
  id                String      @id @default(cuid())
  orderNumber       String      @unique
  type              OrderType
  status            OrderStatus @default(PENDING)
  
  // Info del cliente (sin autenticación)
  customerName      String?
  customerEmail     String?
  
  // Relaciones
  tableId           String?
  table             Table?      @relation(fields: [tableId], references: [id])
  
  userId            String?     // Usuario que creó la orden (trabajador/admin)
  user              User?       @relation(fields: [userId], references: [id])
  
  items             OrderItem[]
  review            Review?     // Reseña de la orden
  
  // Montos
  subtotal          Float
  tax               Float       @default(0)
  tip               Float       @default(0)
  total             Float
  
  // Observaciones
  notes             String?     @db.Text
  
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  @@index([tableId])
  @@index([userId])
  @@index([status])
}

model OrderItem {
  id            String   @id @default(cuid())
  orderId       String
  productId     String
  quantity      Int
  price         Float    // Precio al momento de la orden
  notes         String?  // Observaciones del producto (ej: sin cebolla)
  
  order         Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product       Product  @relation(fields: [productId], references: [id])
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([orderId])
  @@index([productId])
}

model Review {
  id            String   @id @default(cuid())
  orderId       String   @unique
  rating        Int      // 1-5 estrellas
  comment       String?  @db.Text
  
  order         Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([rating])
}
