generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

enum Role {
  CLIENTE
  MESERO
  COCINERO
  ADMIN
}

enum OrderStatus {
  PENDIENTE
  ACEPTADA
  PREPARANDO
  LISTA
  ENTREGADA
  COMPLETADA
  PAGADA
  CANCELADA
}

enum OrderType {
  COMER_AQUI
  PARA_LLEVAR
}

model Restaurant {
  id              String    @id @default(cuid())
  name            String
  slug            String    @unique
  description     String?   @db.Text
  category        String?   // Tipo de restaurante: "Comida r√°pida", "Gourmet", "Casual", etc.
  address         String?
  phone           String?
  email           String?
  logoUrl         String?
  averageRating   Float     @default(0)
  totalReviews    Int       @default(0)
  taxRate         Float     @default(0.19)
  currency        String    @default("COP")
  users           User[]
  categories      Category[]
  products        Product[]
  tables          Table[]
  orders          Order[]
  inventory       InventoryItem[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model User {
  id            String      @id @default(cuid())
  name          String
  email         String?     @unique
  document      String      @unique
  passwordHash  String
  role          Role        @default(CLIENTE)
  active        Boolean     @default(true)
  restaurantId  String?
  restaurant    Restaurant? @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  orders        Order[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  @@index([restaurantId])
}

model Category {
  id            String    @id @default(cuid())
  name          String
  description   String?
  imageUrl      String?
  order         Int       @default(0)
  restaurantId  String
  restaurant    Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  products      Product[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  @@index([restaurantId])
}

model Product {
  id            String    @id @default(cuid())
  name          String
  description   String?   @db.Text
  price         Float
  imageUrl      String?
  available     Boolean   @default(true)
  category      String    @default("PLATO_PRINCIPAL") // ENTRADA, PLATO_PRINCIPAL, POSTRE, BEBIDA, OTRO
  categoryId    String?
  categoryRef   Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  restaurantId  String
  restaurant    Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  orderItems    OrderItem[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  @@index([categoryId])
  @@index([restaurantId])
}

model Table {
  id            String      @id @default(cuid())
  number        Int
  capacity      Int         @default(4)
  available     Boolean     @default(true)
  qrCode        String      @unique
  qrImageUrl    String?     @db.Text
  restaurantId  String
  restaurant    Restaurant  @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  sessions      TableSession[]
  orders        Order[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  @@unique([restaurantId, number])
  @@index([restaurantId])
  @@index([qrCode])
}

model TableSession {
  id              String      @id @default(cuid())
  tableId         String
  table           Table       @relation(fields: [tableId], references: [id], onDelete: Cascade)
  sessionCode     String      @unique
  customerName    String?
  active          Boolean     @default(true)
  orders          Order[]
  startedAt       DateTime    @default(now())
  closedAt        DateTime?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  @@index([tableId])
  @@index([sessionCode])
}

model Order {
  id                String        @id @default(cuid())
  orderNumber       String        @unique
  type              OrderType     @default(COMER_AQUI)
  status            OrderStatus   @default(PENDIENTE)
  restaurantId      String
  restaurant        Restaurant    @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  tableId           String?
  table             Table?        @relation(fields: [tableId], references: [id])
  sessionId         String?
  session           TableSession? @relation(fields: [sessionId], references: [id])
  userId            String?
  user              User?         @relation(fields: [userId], references: [id])
  customerName      String?
  customerEmail     String?
  items             OrderItem[]
  review            Review?
  subtotal          Float
  tax               Float         @default(0)
  tip               Float         @default(0)
  discount          Float         @default(0)
  total             Float
  notes             String?       @db.Text
  acceptedAt        DateTime?
  preparedAt        DateTime?
  deliveredAt       DateTime?
  completedAt       DateTime?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  @@index([restaurantId])
  @@index([tableId])
  @@index([sessionId])
  @@index([userId])
  @@index([status])
  @@index([orderNumber])
}

model OrderItem {
  id            String   @id @default(cuid())
  orderId       String
  productId     String
  quantity      Int
  price         Float
  notes         String?
  order         Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product       Product  @relation(fields: [productId], references: [id])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  @@index([orderId])
  @@index([productId])
}

model Review {
  id            String   @id @default(cuid())
  orderId       String   @unique
  rating        Int
  comment       String?  @db.Text
  order         Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  @@index([rating])
}

model InventoryItem {
  id              String      @id @default(cuid())
  name            String
  sku             String?
  quantity        Float
  unit            String      @default("unidad")
  minStock        Float?
  cost            Float?
  restaurantId    String
  restaurant      Restaurant  @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  @@unique([restaurantId, sku])
  @@index([restaurantId])
}
